<?php

/**
 * This is the model class for table "MST_LAWAN_BOND_TRX".
 *
 * The followings are the available columns in table 'MST_LAWAN_BOND_TRX':
 * @property string $lawan
 * @property string $lawan_name
 * @property string $lawan_type
 * @property string $phone
 * @property string $fax
 * @property string $contact_person
 * @property double $capital_tax_pcn
 * @property string $deb_gl_acct
 * @property string $cre_gl_acct
 * @property string $sl_acct_cd
 * @property string $cre_dt
 * @property string $user_id
 * @property string $upd_dt
 * @property string $upd_by
 * @property string $approved_dt
 * @property string $approved_by
 * @property string $approved_stat
 */
class LawanBondTrx extends AActiveRecordSP
{
	//AH: #BEGIN search (datetime || date) additional comparison
	public $cre_dt_date;
	public $cre_dt_month;
	public $cre_dt_year;

	public $upd_dt_date;
	public $upd_dt_month;
	public $upd_dt_year;

	public $approved_dt_date;
	public $approved_dt_month;
	public $approved_dt_year;
	//AH: #END search (datetime || date)  additional comparison
	
	public function __construct($scenario = 'insert')
	{
		parent::__construct($scenario);
		$this->logRecord=true;
	}
	
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}
    

	public function tableName()
	{
		return 'MST_LAWAN_BOND_TRX';
	}
	
	public function getLawanBond(){
		return $this->lawan.' - '.$this->lawan_name.' - '.$this->lawan_type;
	}

	public function rules()
	{
		return array(
		
			array('approved_dt', 'application.components.validator.ADatePickerSwitcherValidatorSP'),
		
			array('capital_tax_pcn', 'application.components.validator.ANumberSwitcherValidator'),
			array('lawan,lawan_name,custody_cbest_cd,lawan_type,capital_tax_pcn,deb_gl_acct,cre_gl_acct,sl_acct_cd','required'),
			array('capital_tax_pcn', 'numerical'),
			array('lawan', 'length', 'max'=>12),
			array('lawan_name, contact_person', 'length', 'max'=>50),
			array('lawan_type, approved_stat', 'length', 'max'=>1),
			array('phone, fax', 'length', 'max'=>30),
			array('deb_gl_acct, cre_gl_acct', 'length', 'max'=>4),
			array('sl_acct_cd', 'length', 'max'=>8),
			array('user_id, upd_by, approved_by', 'length', 'max'=>10),
			array('cre_dt, upd_dt, approved_dt', 'safe'),

			// The following rule is used by search().
			// Please remove those attributes that should not be searched.
	
			array('lawan, lawan_name, lawan_type, phone, fax, contact_person, capital_tax_pcn, deb_gl_acct, cre_gl_acct, sl_acct_cd, cre_dt, user_id, upd_dt, upd_by, approved_dt, approved_by, approved_stat,cre_dt_date,cre_dt_month,cre_dt_year,upd_dt_date,upd_dt_month,upd_dt_year,approved_dt_date,approved_dt_month,approved_dt_year', 'safe', 'on'=>'search'),
		);
	}

	public function relations()
	{
		return array();
	}

	public function attributeLabels()
	{
		return array(
			'lawan' => 'Kode',
			'lawan_name' => 'Name',
			'lawan_type' => 'Type',
			'phone' => 'Phone',
			'ctp_cd'=>'CTP Code',
			'e_mail'=>'E-Mail Address',
			'custudy_cbest_cd'=>'Custody',
			'fax' => 'Fax',
			'contact_person' => 'Contact Person',
			'capital_tax_pcn' => 'Capital Gain Tax',
			'deb_gl_acct' => 'Gl Account CD Activa',
			'cre_gl_acct' => 'Passiva',
			'sl_acct_cd' => 'Sub Acct',
			'cre_dt' => 'Cre Date',
			'user_id' => 'User',
			'upd_dt' => 'Upd Date',
			'upd_by' => 'Upd By',
			'approved_dt' => 'Approved Date',
			'approved_by' => 'Approved By',
			'approved_stat' => 'Approved Sts',
		);
	}
	public function getTypeDesc(){
		switch($this->lawan_type){
			case 'B':
				return 'Bank';
				break;
			case 'R':
				return 'Reksa Dana';
			break;
			case 'S':
				return 'Sekuritas';
			break;
			case 'O':
				return 'Others';
			break;
			}
	}
public function executeSp($exec_status,$old_id)
	{
		$connection  = Yii::app()->db;
		$transaction = $connection->beginTransaction();	
		
		try{
			$query  = "CALL SP_MST_LAWAN_BOND_TRX_UPD(
			        :P_SEARCH_LAWAN,
					:P_LAWAN,
					:P_LAWAN_NAME,
					:P_LAWAN_TYPE,
					:P_PHONE,
					:P_FAX,
					:P_CONTACT_PERSON,
					:P_CAPITAL_TAX_PCN,
					:P_DEB_GL_ACCT,
					:P_CRE_GL_ACCT,
					:P_SL_ACCT_CD,
					TO_DATE(:P_CRE_DT,'YYYY-MM-DD HH24:MI:SS'),
					:P_USER_ID,
					TO_DATE(:P_UPD_DT,'YYYY-MM-DD HH24:MI:SS'),
					:P_UPD_BY,
					:P_CTP_CD,
					:P_E_MAIL,
					:P_CUSTODY_CBEST_CD,
					:P_UPD_STATUS,
				   :P_IP_ADDRESS,
				   :P_CANCEL_REASON,
				   :P_ERROR_CODE,
				   :P_ERROR_MSG				
	   )";
	  	 $command = $connection->createCommand($query);
		$command->bindValue(":P_SEARCH_LAWAN",$old_id,PDO::PARAM_STR);
		$command->bindValue(":P_LAWAN",$this->lawan,PDO::PARAM_STR);
		$command->bindValue(":P_LAWAN_NAME",$this->lawan_name,PDO::PARAM_STR);
		$command->bindValue(":P_LAWAN_TYPE",$this->lawan_type,PDO::PARAM_STR);
		$command->bindValue(":P_PHONE",$this->phone,PDO::PARAM_STR);
		$command->bindValue(":P_FAX",$this->fax,PDO::PARAM_STR);
		$command->bindValue(":P_CONTACT_PERSON",$this->contact_person,PDO::PARAM_STR);
		$command->bindValue(":P_CAPITAL_TAX_PCN",$this->capital_tax_pcn,PDO::PARAM_STR);
		$command->bindValue(":P_DEB_GL_ACCT",$this->deb_gl_acct,PDO::PARAM_STR);
		$command->bindValue(":P_CRE_GL_ACCT",$this->cre_gl_acct,PDO::PARAM_STR);
		$command->bindValue(":P_SL_ACCT_CD",$this->sl_acct_cd,PDO::PARAM_STR);
		$command->bindValue(":P_CRE_DT",$this->cre_dt,PDO::PARAM_STR);
		$command->bindValue(":P_USER_ID",$this->user_id,PDO::PARAM_STR);
		$command->bindValue(":P_UPD_DT",$this->upd_dt,PDO::PARAM_STR);
		$command->bindValue(":P_UPD_BY",$this->upd_by,PDO::PARAM_STR);
		$command->bindValue(":P_CTP_CD",$this->ctp_cd,PDO::PARAM_STR);
		$command->bindValue(":P_E_MAIL",$this->e_mail,PDO::PARAM_STR);
		$command->bindValue(":P_CUSTODY_CBEST_CD",$this->custody_cbest_cd,PDO::PARAM_STR);
		$command->bindValue(":P_UPD_STATUS",$exec_status,PDO::PARAM_STR);
			$command->bindValue(":P_IP_ADDRESS",$this->ip_address,PDO::PARAM_STR);
			$command->bindValue(":P_CANCEL_REASON",$this->cancel_reason,PDO::PARAM_STR);
			$command->bindParam(":P_ERROR_CODE",$this->error_code,PDO::PARAM_INT,10);
			$command->bindParam(":P_ERROR_MSG",$this->error_msg,PDO::PARAM_STR,1000);

			$command->execute();
			$transaction->commit();
		}catch(Exception $ex){
			$transaction->rollback();
			if($this->error_code = -999)
				$this->error_msg = $ex->getMessage();
		}
		
		if($this->error_code < 0)
			$this->addError('error_msg', 'Error '.$this->error_code.' '.$this->error_msg);
		
		return $this->error_code;
	
	 }
	public function search()
	{
		$criteria = new CDbCriteria;
		$criteria->compare('lawan',$this->lawan,true);
		$criteria->compare('lawan_name',$this->lawan_name,true);
		$criteria->compare('lawan_type',$this->lawan_type,true);
		$criteria->compare('phone',$this->phone,true);
		$criteria->compare('fax',$this->fax,true);
		$criteria->compare('contact_person',$this->contact_person,true);
		$criteria->compare('capital_tax_pcn',$this->capital_tax_pcn);
		$criteria->compare('deb_gl_acct',$this->deb_gl_acct,true);
		$criteria->compare('cre_gl_acct',$this->cre_gl_acct,true);
		$criteria->compare('sl_acct_cd',$this->sl_acct_cd,true);

		if(!empty($this->cre_dt_date))
			$criteria->addCondition("TO_CHAR(t.cre_dt,'DD') LIKE '%".$this->cre_dt_date."%'");
		if(!empty($this->cre_dt_month))
			$criteria->addCondition("TO_CHAR(t.cre_dt,'MM') LIKE '%".$this->cre_dt_month."%'");
		if(!empty($this->cre_dt_year))
			$criteria->addCondition("TO_CHAR(t.cre_dt,'YYYY') LIKE '%".$this->cre_dt_year."%'");		$criteria->compare('user_id',$this->user_id,true);

		if(!empty($this->upd_dt_date))
			$criteria->addCondition("TO_CHAR(t.upd_dt,'DD') LIKE '%".$this->upd_dt_date."%'");
		if(!empty($this->upd_dt_month))
			$criteria->addCondition("TO_CHAR(t.upd_dt,'MM') LIKE '%".$this->upd_dt_month."%'");
		if(!empty($this->upd_dt_year))
			$criteria->addCondition("TO_CHAR(t.upd_dt,'YYYY') LIKE '%".$this->upd_dt_year."%'");		$criteria->compare('upd_by',$this->upd_by,true);

		if(!empty($this->approved_dt_date))
			$criteria->addCondition("TO_CHAR(t.approved_dt,'DD') LIKE '%".$this->approved_dt_date."%'");
		if(!empty($this->approved_dt_month))
			$criteria->addCondition("TO_CHAR(t.approved_dt,'MM') LIKE '%".$this->approved_dt_month."%'");
		if(!empty($this->approved_dt_year))
			$criteria->addCondition("TO_CHAR(t.approved_dt,'YYYY') LIKE '%".$this->approved_dt_year."%'");		$criteria->compare('approved_by',$this->approved_by,true);
		$criteria->compare('approved_stat',$this->approved_stat,true);

		$sort = new CSort();
		$sort->defaultOrder = 'lawan';
		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
			'sort'=>$sort
		));
	}
}